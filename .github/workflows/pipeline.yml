name: Deploy to Amazon EKS cluster running on AWS Fargate

on:
  push:
    branches:
      - main


env: 
  AWS_REGION: us-west-2
  ECR_REPOSITORY: ${{ secrets.REPO }}
  

jobs:
  build:
    name: build and push docker image to aws ecr
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR repo if necessary
      id: ecr-repo
      uses: int128/create-ecr-repository-action@v1
      with:
        repository: ${{ secrets.REPO }}
        # lifecycle-policy: config/lifecycle-policy.json
        # public: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY: ${{ secrets.REPO }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        cd app
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    outputs:
        imageName: ${{ steps.build-image.outputs.image }} 


  create_cluster:
    runs-on: ubuntu-latest
    needs: build
    name: Create an EKS on Fargate cluster
    env:
        ecr_image: ${{ needs.build.outputs.imageName }}

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: installing dependencies
      id: install-dependencies
      run: |
        if which eksctl > /dev/null; then
              echo "eksctl is already installed"
              exit 0
            fi
            mkdir -p eksctl_download
            curl --silent --location --retry 5 "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" \
              | tar xz -C eksctl_download
            chmod +x eksctl_download/eksctl
            SUDO=""
            if [ $(id -u) -ne 0 ] && which sudo > /dev/null ; then
              SUDO="sudo"
            fi
            $SUDO mv eksctl_download/eksctl /usr/local/bin/
            rmdir eksctl_download

    - name: Create cluster
      working-directory: cluster
      id: create-cluster
      run: |
        sudo chmod +x create-cluster.sh
        ./create-cluster.sh

    - name: Setup kubeconfig
      id: setup-kubeconfig
      env:
        CLUSTER_NAME: kubernetes-node-app
        
      run: |
        aws eks --region $AWS_REGION update-kubeconfig --name $CLUSTER_NAME

    - name: Deploy k8s yaml
      id: deploy-k8s-yaml
      env:
        K8S_YAML_DIR: ./k8s
        IMAGE_NAME: ${{ env.ecr_image}}
      run: |
        # Setup kustomize
        cd $K8S_YAML_DIR
        curl -s -o kustomize --location https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
        ./kustomize edit set image repo-image=$IMAGE_NAME
        ./kustomize build . | kubectl apply -f - 
        # Verify deployment
        kubectl rollout status deployment/kubernetes-node-app --namespace development
        # List Public IP of cluster
        kubectl get services -o wide
        kubectl get ingress













































































